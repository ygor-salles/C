//Arquivo PilhaDin.h
struct aluno 
{
    int matricula;
    char nome[30];
    float n1, n2; n3;
};
typedef struct elemento* Pilha;

//Arquivo Main.c
Pilha *pi;

/****************************************************************************/
//Arquivo PilhaDin.c
#include<stdio.h>
#include<stdlib.h>

struct elemento 
{
    struct aluno dados;
    struct elemento *prox;
};
typedef struct elemento Elemento;

/****************************************************************************/
Pilha* criar_pilha()
{
  Pilha *pi = (Pilha*) malloc(sizeof(Pilha));
  if (pi != NULL)
    *pi = NULL;
  return pi;  
}

/****************************************************************************/
Elemento criar_elemento()
{
    Elemento *no = (Elemento*) malloc(sizeof(Elemento));
    if (no == NULL) return 0;
    
    return no;
}

/****************************************************************************/
void desempilhar(Pilha* pi)
{
  if (pi != NULL){
    Elemento *no;
    while ((*pi) != NULL){
      no = *pi;
      *pi = (*pi)->prox;
      free(no);
    }
    free(pi);
  }
  return ;
}

/****************************************************************************/
int tamanho_pilha(Pilha *pi)
{
  if (pi == NULL) return 0;

  int cont=0; Elemento* no = *pi;
  while (no != NULL){
    cont++;
    no = no->prox;
  }
  return cont;
}

/****************************************************************************/
int pilha_cheia(Pilha *pi)
{
  return 0;
}

/****************************************************************************/
int pilha_vazia(Pilha *pi)
{
  if (pi == NULL) return 1;
  if ((*pi) == NULL) return 1;
  return 0;
}

/****************************************************************************/
int empilhar(Pilha *pi, struct Aluno al)
{
  if (pi == NULL) return 0;
  Elemento* no;
  no = criar_elemento();

  no->dados = al;
  no->prox = (*pi);
  *pi = no;
  
  return 1
}

/****************************************************************************/
int remove_pilha(Pilha* pi)
{
    if (pi == NULL) return 0;
    if ((*pi) == NULL)  return 0;
    
    Elemento *no = (*pi);
    *pi = no->prox;
    free(no);
    
    return 1;
}

/****************************************************************************/
int consulta_topo_pilha (Pilha* pi, struct Aluno *al)
{
    if (pi == NULL) return 0;
    if ((*pi) == NULL) return 0;
    
    *al = (*pi)->dados;
    
    return 1 
}

